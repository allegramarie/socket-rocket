(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(['exports', 'react'], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require('react'));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.react);
    global.index = mod.exports;
  }
})(this, function (exports, _react) {
  'use strict';

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _react2 = _interopRequireDefault(_react);

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  var _createClass = function () {
    function defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
      }
    }

    return function (Constructor, protoProps, staticProps) {
      if (protoProps) defineProperties(Constructor.prototype, protoProps);
      if (staticProps) defineProperties(Constructor, staticProps);
      return Constructor;
    };
  }();

  function _possibleConstructorReturn(self, call) {
    if (!self) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return call && (typeof call === "object" || typeof call === "function") ? call : self;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
  }

  var Canvas = function (_Component) {
    _inherits(Canvas, _Component);

    function Canvas() {
      var _ref;

      var _temp, _this, _ret;

      _classCallCheck(this, Canvas);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Canvas.__proto__ || Object.getPrototypeOf(Canvas)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
        lastLength: 0
      }, _this.handleOnMouseDown = function (e) {
        if (!_this.props.drawingEnabled) {
          return;
        }

        var rect = _this.node.getBoundingClientRect();
        _this.ctx.beginPath();

        _this.lastX = e.clientX - rect.left;
        _this.lastY = e.clientY - rect.top;
        _this.drawing = true;
      }, _this.handleOnMouseMove = function (e) {
        if (_this.drawing) {
          var rect = _this.node.getBoundingClientRect();
          var currentX = e.clientX - rect.left;
          var currentY = e.clientY - rect.top;

          _this.draw(_this.lastX, _this.lastY, currentX, currentY);
          _this.update();

          if (_this.props.onDraw) {
            _this.props.onDraw({
              from: {
                x: _this.lastX,
                y: _this.lastY
              },
              to: {
                x: currentX,
                y: currentY
              },
              brushColor: _this.props.brushColor,
              linewidth: _this.props.lineWidth
            });
          }

          _this.lastX = currentX;
          _this.lastY = currentY;
        }
      }, _this.handleonMouseUp = function () {
        _this.drawing = false;
      }, _temp), _possibleConstructorReturn(_this, _ret);
    }

    _createClass(Canvas, [{
      key: 'componentDidMount',
      value: function componentDidMount() {
        var canvas = this.node;

        canvas.style.width = '100%';
        canvas.style.height = '100%';
        canvas.width = canvas.offsetWidth;
        canvas.height = canvas.offsetHeight;
        this.ctx = canvas.getContext('2d');
      }
    }, {
      key: 'componentWillReceiveProps',
      value: function componentWillReceiveProps(nextProps) {
        //todo: find a better way to see if a coordinate has been applied
        if (nextProps.lines && nextProps.lines.length > this.state.lastLength) {
          for (var i = this.state.lastLength; i < nextProps.lines.length; i += 1) {
            // console.log('looping through lines ', i);
            var l = nextProps.lines[i];
            this.draw(l.from.x, l.from.y, l.to.x, l.to.y);
          }

          this.update();

          this.setState({
            lastLength: nextProps.lines.length
          });
        }
      }
    }, {
      key: 'update',
      value: function update() {
        this.ctx.stroke();
      }
    }, {
      key: 'draw',
      value: function draw(lX, lY, cX, cY) {
        this.ctx.strokeStyle = this.props.brushColor;
        this.ctx.lineWidth = this.props.lineWidth;
        this.ctx.moveTo(lX, lY);
        this.ctx.lineTo(cX, cY);
      }
    }, {
      key: 'render',
      value: function render() {
        var _this2 = this;

        return _react2.default.createElement('canvas', {
          ref: function ref(node) {
            return _this2.node = node;
          },
          style: this.props.canvasStyle,
          onMouseDown: this.handleOnMouseDown,
          onTouchStart: this.handleOnMouseDown,
          onMouseMove: this.handleOnMouseMove,
          onTouchMove: this.handleOnMouseMove,
          onMouseUp: this.handleonMouseUp,
          onTouchEnd: this.handleonMouseUp
        });
      }
    }]);

    return Canvas;
  }(_react.Component);

  Canvas.defaultProps = {
    brushColor: '#000000',
    lineWidth: 2,
    canvasStyle: {
      backgroundColor: '#FFFFFF',
      cursor: 'pointer'
    },
    drawingEnabled: false,
    lines: []
  };

  exports.default = Canvas;
});