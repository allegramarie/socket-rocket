{"ast":null,"code":"import _objectSpread from \"/Users/bernda/Documents/sockets/client/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport openSocket from \"socket.io-client\";\nimport Rx from \"rxjs\";\nvar port = parseInt(window.location.search.replace(\"?\", \"\"), 10) || 8080;\nvar socket = openSocket(\"http://localhost:\".concat(port));\n\nfunction subscribeToDrawings(cb) {\n  socket.on(\"drawing\", cb);\n  socket.emit('subscribeToDrawings');\n}\n\nfunction createDrawing(name) {\n  socket.emit(\"createDrawing\", {\n    name: name\n  });\n}\n\nfunction publishLine(_ref) {\n  var drawingId = _ref.drawingId,\n      line = _ref.line;\n  socket.emit(\"publishLine\", _objectSpread({\n    drawingId: drawingId\n  }, line));\n}\n\nfunction subscribeToDrawingLines(drawingId, cb) {\n  var lineStream = Rx.Observable.fromEventPattern(function (h) {\n    return socket.on(\"drawingLine:\".concat(drawingId), h);\n  }, function (h) {\n    return socket.off(\"drawingLine:\".concat(drawingId), h);\n  });\n  var bufferedTimeStream = lineStream.bufferTime(100).map(function (lines) {\n    return {\n      lines: lines\n    };\n  });\n  var reconnectStream = Rx.Observable.fromEventPattern(function (h) {\n    return socket.on(\"connect\", h);\n  });\n  bufferedTimeStream.subscribe(function (linesEvent) {\n    return cb(linesEvent);\n  });\n  socket.emit(\"subscribeToDrawingLines\", drawingId);\n}\n\nfunction subscribeToConnectionEvent(cb) {\n  socket.on(\"connect\", function () {\n    return cb({\n      state: \"connected\",\n      port: port\n    });\n  });\n  socket.on(\"disconnect\", function () {\n    return cb({\n      state: \"disconnected\",\n      port: port\n    });\n  });\n  socket.on(\"connect_error\", function () {\n    return cb({\n      state: \"disconnected\",\n      port: port\n    });\n  });\n}\n\nexport { subscribeToDrawings, createDrawing, publishLine, subscribeToDrawingLines, subscribeToConnectionEvent };","map":{"version":3,"sources":["/Users/bernda/Documents/sockets/client/src/api.js"],"names":["openSocket","Rx","port","parseInt","window","location","search","replace","socket","subscribeToDrawings","cb","on","emit","createDrawing","name","publishLine","drawingId","line","subscribeToDrawingLines","lineStream","Observable","fromEventPattern","h","off","bufferedTimeStream","bufferTime","map","lines","reconnectStream","subscribe","linesEvent","subscribeToConnectionEvent","state"],"mappings":";AAAA,OAAOA,UAAP,MAAuB,kBAAvB;AACA,OAAOC,EAAP,MAAe,MAAf;AAEA,IAAMC,IAAI,GAAGC,QAAQ,CAACC,MAAM,CAACC,QAAP,CAAgBC,MAAhB,CAAuBC,OAAvB,CAA+B,GAA/B,EAAoC,EAApC,CAAD,EAA0C,EAA1C,CAAR,IAAyD,IAAtE;AACA,IAAMC,MAAM,GAAGR,UAAU,4BAAqBE,IAArB,EAAzB;;AAEA,SAASO,mBAAT,CAA6BC,EAA7B,EAAgC;AAC/BF,EAAAA,MAAM,CAACG,EAAP,CAAU,SAAV,EAAqBD,EAArB;AACAF,EAAAA,MAAM,CAACI,IAAP,CAAY,qBAAZ;AACA;;AAED,SAASC,aAAT,CAAuBC,IAAvB,EAA4B;AAC3BN,EAAAA,MAAM,CAACI,IAAP,CAAY,eAAZ,EAA6B;AAAEE,IAAAA,IAAI,EAAJA;AAAF,GAA7B;AACA;;AAED,SAASC,WAAT,OAAyC;AAAA,MAAlBC,SAAkB,QAAlBA,SAAkB;AAAA,MAAPC,IAAO,QAAPA,IAAO;AACxCT,EAAAA,MAAM,CAACI,IAAP,CAAY,aAAZ;AAA6BI,IAAAA,SAAS,EAATA;AAA7B,KAA2CC,IAA3C;AACA;;AAED,SAASC,uBAAT,CAAiCF,SAAjC,EAA4CN,EAA5C,EAA+C;AAC9C,MAAMS,UAAU,GAAGlB,EAAE,CAACmB,UAAH,CAAcC,gBAAd,CAClB,UAAAC,CAAC;AAAA,WAAId,MAAM,CAACG,EAAP,uBAAyBK,SAAzB,GAAsCM,CAAtC,CAAJ;AAAA,GADiB,EAElB,UAAAA,CAAC;AAAA,WAAId,MAAM,CAACe,GAAP,uBAA0BP,SAA1B,GAAuCM,CAAvC,CAAJ;AAAA,GAFiB,CAAnB;AAIA,MAAME,kBAAkB,GAAGL,UAAU,CACpCM,UAD0B,CACf,GADe,EAE1BC,GAF0B,CAEtB,UAAAC,KAAK;AAAA,WAAK;AAAEA,MAAAA,KAAK,EAALA;AAAF,KAAL;AAAA,GAFiB,CAA3B;AAIA,MAAMC,eAAe,GAAG3B,EAAE,CAACmB,UAAH,CAAcC,gBAAd,CACvB,UAAAC,CAAC;AAAA,WAAId,MAAM,CAACG,EAAP,CAAU,SAAV,EAAqBW,CAArB,CAAJ;AAAA,GADsB,CAAxB;AAIAE,EAAAA,kBAAkB,CAACK,SAAnB,CAA6B,UAAAC,UAAU;AAAA,WAAIpB,EAAE,CAACoB,UAAD,CAAN;AAAA,GAAvC;AACAtB,EAAAA,MAAM,CAACI,IAAP,CAAY,yBAAZ,EAAuCI,SAAvC;AACA;;AAED,SAASe,0BAAT,CAAoCrB,EAApC,EAAuC;AACtCF,EAAAA,MAAM,CAACG,EAAP,CAAU,SAAV,EAAqB;AAAA,WAAMD,EAAE,CAAC;AAC7BsB,MAAAA,KAAK,EAAE,WADsB;AAE7B9B,MAAAA,IAAI,EAAJA;AAF6B,KAAD,CAAR;AAAA,GAArB;AAIAM,EAAAA,MAAM,CAACG,EAAP,CAAU,YAAV,EAAwB;AAAA,WAAMD,EAAE,CAAC;AAChCsB,MAAAA,KAAK,EAAE,cADyB;AAEhC9B,MAAAA,IAAI,EAAJA;AAFgC,KAAD,CAAR;AAAA,GAAxB;AAIAM,EAAAA,MAAM,CAACG,EAAP,CAAU,eAAV,EAA2B;AAAA,WAAMD,EAAE,CAAC;AACnCsB,MAAAA,KAAK,EAAE,cAD4B;AAEnC9B,MAAAA,IAAI,EAAJA;AAFmC,KAAD,CAAR;AAAA,GAA3B;AAIA;;AAED,SACCO,mBADD,EAECI,aAFD,EAGCE,WAHD,EAICG,uBAJD,EAKCa,0BALD","sourcesContent":["import openSocket from \"socket.io-client\";\nimport Rx from \"rxjs\";\n\nconst port = parseInt(window.location.search.replace(\"?\", \"\"), 10) || 8080;\nconst socket = openSocket(`http://localhost:${port}`);\n\nfunction subscribeToDrawings(cb){\n\tsocket.on(\"drawing\", cb)\n\tsocket.emit('subscribeToDrawings');\n}\n\nfunction createDrawing(name){\n\tsocket.emit(\"createDrawing\", { name })\n}\n\nfunction publishLine({ drawingId, line }){\n\tsocket.emit(\"publishLine\", { drawingId, ...line })\n}\n\nfunction subscribeToDrawingLines(drawingId, cb){\n\tconst lineStream = Rx.Observable.fromEventPattern(\n\t\th => socket.on(`drawingLine:${drawingId}`, h),\n\t\th => socket.off(`drawingLine:${drawingId}`, h)\n\t)\n\tconst bufferedTimeStream = lineStream\n\t.bufferTime(100)\n\t.map(lines => ({ lines }));\n\n\tconst reconnectStream = Rx.Observable.fromEventPattern(\n\t\th => socket.on(\"connect\", h)\n\t)\n\n\tbufferedTimeStream.subscribe(linesEvent => cb(linesEvent));\n\tsocket.emit(\"subscribeToDrawingLines\", drawingId);\n}\n\nfunction subscribeToConnectionEvent(cb){\n\tsocket.on(\"connect\", () => cb({\n\t\tstate: \"connected\",\n\t\tport\n\t}))\n\tsocket.on(\"disconnect\", () => cb({\n\t\tstate: \"disconnected\",\n\t\tport\n\t}))\n\tsocket.on(\"connect_error\", () => cb({\n\t\tstate: \"disconnected\",\n\t\tport\n\t}))\n}\n\nexport {\n\tsubscribeToDrawings, \n\tcreateDrawing,\n\tpublishLine,\n\tsubscribeToDrawingLines,\n\tsubscribeToConnectionEvent\n};"]},"metadata":{},"sourceType":"module"}