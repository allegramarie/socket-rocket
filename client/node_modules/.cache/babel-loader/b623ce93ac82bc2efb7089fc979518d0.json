{"ast":null,"code":"(function (global, factory) {\n  if (typeof define === \"function\" && define.amd) {\n    define(['exports', 'react'], factory);\n  } else if (typeof exports !== \"undefined\") {\n    factory(exports, require('react'));\n  } else {\n    var mod = {\n      exports: {}\n    };\n    factory(mod.exports, global.react);\n    global.index = mod.exports;\n  }\n})(this, function (exports, _react) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n  var _react2 = _interopRequireDefault(_react);\n\n  function _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n      default: obj\n    };\n  }\n\n  function _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n      throw new TypeError(\"Cannot call a class as a function\");\n    }\n  }\n\n  var _createClass = function () {\n    function defineProperties(target, props) {\n      for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n      }\n    }\n\n    return function (Constructor, protoProps, staticProps) {\n      if (protoProps) defineProperties(Constructor.prototype, protoProps);\n      if (staticProps) defineProperties(Constructor, staticProps);\n      return Constructor;\n    };\n  }();\n\n  function _possibleConstructorReturn(self, call) {\n    if (!self) {\n      throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n\n    return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n  }\n\n  function _inherits(subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n      throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n    }\n\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n      constructor: {\n        value: subClass,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n  }\n\n  var Canvas = function (_Component) {\n    _inherits(Canvas, _Component);\n\n    function Canvas() {\n      var _ref;\n\n      var _temp, _this, _ret;\n\n      _classCallCheck(this, Canvas);\n\n      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Canvas.__proto__ || Object.getPrototypeOf(Canvas)).call.apply(_ref, [this].concat(args))), _this), _this.state = {\n        lastLength: 0\n      }, _this.handleOnMouseDown = function (e) {\n        if (!_this.props.drawingEnabled) {\n          return;\n        }\n\n        var rect = _this.node.getBoundingClientRect();\n\n        _this.ctx.beginPath();\n\n        _this.lastX = e.clientX - rect.left;\n        _this.lastY = e.clientY - rect.top;\n        _this.drawing = true;\n      }, _this.handleOnMouseMove = function (e) {\n        if (_this.drawing) {\n          var rect = _this.node.getBoundingClientRect();\n\n          var currentX = e.clientX - rect.left;\n          var currentY = e.clientY - rect.top;\n\n          _this.draw(_this.lastX, _this.lastY, currentX, currentY);\n\n          _this.update();\n\n          if (_this.props.onDraw) {\n            _this.props.onDraw({\n              from: {\n                x: _this.lastX,\n                y: _this.lastY\n              },\n              to: {\n                x: currentX,\n                y: currentY\n              },\n              brushColor: _this.props.brushColor,\n              linewidth: _this.props.lineWidth\n            });\n          }\n\n          _this.lastX = currentX;\n          _this.lastY = currentY;\n        }\n      }, _this.handleonMouseUp = function () {\n        _this.drawing = false;\n      }, _temp), _possibleConstructorReturn(_this, _ret);\n    }\n\n    _createClass(Canvas, [{\n      key: 'componentDidMount',\n      value: function componentDidMount() {\n        var canvas = this.node;\n        canvas.style.width = '100%';\n        canvas.style.height = '100%';\n        canvas.width = canvas.offsetWidth;\n        canvas.height = canvas.offsetHeight;\n        this.ctx = canvas.getContext('2d');\n      }\n    }, {\n      key: 'componentWillReceiveProps',\n      value: function componentWillReceiveProps(nextProps) {\n        //todo: find a better way to see if a coordinate has been applied\n        if (nextProps.lines && nextProps.lines.length > this.state.lastLength) {\n          for (var i = this.state.lastLength; i < nextProps.lines.length; i += 1) {\n            // console.log('looping through lines ', i);\n            var l = nextProps.lines[i];\n            this.draw(l.from.x, l.from.y, l.to.x, l.to.y);\n          }\n\n          this.update();\n          this.setState({\n            lastLength: nextProps.lines.length\n          });\n        }\n      }\n    }, {\n      key: 'update',\n      value: function update() {\n        this.ctx.stroke();\n      }\n    }, {\n      key: 'draw',\n      value: function draw(lX, lY, cX, cY) {\n        this.ctx.strokeStyle = this.props.brushColor;\n        this.ctx.lineWidth = this.props.lineWidth;\n        this.ctx.moveTo(lX, lY);\n        this.ctx.lineTo(cX, cY);\n      }\n    }, {\n      key: 'render',\n      value: function render() {\n        var _this2 = this;\n\n        return _react2.default.createElement('canvas', {\n          ref: function ref(node) {\n            return _this2.node = node;\n          },\n          style: this.props.canvasStyle,\n          onMouseDown: this.handleOnMouseDown,\n          onTouchStart: this.handleOnMouseDown,\n          onMouseMove: this.handleOnMouseMove,\n          onTouchMove: this.handleOnMouseMove,\n          onMouseUp: this.handleonMouseUp,\n          onTouchEnd: this.handleonMouseUp\n        });\n      }\n    }]);\n\n    return Canvas;\n  }(_react.Component);\n\n  Canvas.defaultProps = {\n    brushColor: '#000000',\n    lineWidth: 2,\n    canvasStyle: {\n      backgroundColor: '#FFFFFF',\n      cursor: 'pointer'\n    },\n    drawingEnabled: false,\n    lines: []\n  };\n  exports.default = Canvas;\n});","map":null,"metadata":{},"sourceType":"script"}